<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introduction on WakuConnect Docs</title>
    <link>https://docs.wakuconnect.dev/docs/</link>
    <description>Recent content in Introduction on WakuConnect Docs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 09 Dec 2021 14:00:00 +0100</lastBuildDate>
    
	<atom:link href="https://docs.wakuconnect.dev/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introduction</title>
      <link>https://docs.wakuconnect.dev/docs/introduction/</link>
      <pubDate>Thu, 09 Dec 2021 14:00:00 +0100</pubDate>
      
      <guid>https://docs.wakuconnect.dev/docs/introduction/</guid>
      <description>WakuConnect Docs WakuConnect is a suite of libraries, SDKs and documentations to help you use Waku in your dApp.
Waku is a decentralized, censorship-resistant, network and protocol family. It enables you to add communication features to your dApp in a decentralized manner, ensuring to your users that they will not be censored or de-platformed.
Waku can be used for chat purposes and for many machine-to-machine use cases. You can learn more about Waku at waku.</description>
    </item>
    
    <item>
      <title>Quick Start</title>
      <link>https://docs.wakuconnect.dev/docs/quick_start/</link>
      <pubDate>Thu, 09 Dec 2021 14:00:00 +0100</pubDate>
      
      <guid>https://docs.wakuconnect.dev/docs/quick_start/</guid>
      <description>Quick Start In this section you will learn how to receive and send messages using Waku Relay.
A more in depth guide for Waku Relay can be found here.
Install Install the js-waku package:
npm install js-waku # or with yarn yarn add js-waku Start a waku node import { Waku } from &amp;#39;js-waku&amp;#39;; const waku = await Waku.create({ bootstrap: true }); Listen for messages The contentTopic is a metadata string that allows categorization of messages on the waku network.</description>
    </item>
    
    <item>
      <title>Use Cases</title>
      <link>https://docs.wakuconnect.dev/docs/use_cases/</link>
      <pubDate>Wed, 05 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://docs.wakuconnect.dev/docs/use_cases/</guid>
      <description>Use Cases Waku is a generalized communication network. It can enable numerous use cases, both person-to-person (e.g. messenger) and machine-to-machine (e.g. state channels).
This is a non-exhaustive list of use cases that we have considered and their current status.
If we are aware of other projects using js-waku and other use cases that could be implemented, feel free to open a PR.
Legend:
 Live: We are aware of projects who have implemented this use case.</description>
    </item>
    
    <item>
      <title>Examples</title>
      <link>https://docs.wakuconnect.dev/docs/examples/</link>
      <pubDate>Thu, 09 Dec 2021 14:00:00 +0100</pubDate>
      
      <guid>https://docs.wakuconnect.dev/docs/examples/</guid>
      <description>Examples Here is the list of the code examples and the features they demonstrate. To run or studies the example, click on the repo links.
Minimal ReactJS Chat App Repo: min-react-js-chat.
Demonstrates:
 Group chat React/JavaScript Waku Relay Protobuf using protons No async/await syntax  Minimal ReactJS Waku Store App Repo: store-reactjs-chat.
Demonstrates:
 Waku Store React/JavaScript Protobuf using protons  Vanilla Javascript Using Minified Library Repo: unpkg-js-store.
Demonstrates:
 How to stop retrieving results from Waku Store on condition Use minified bundle from Unpkg.</description>
    </item>
    
    <item>
      <title>Cryptographic Libraries</title>
      <link>https://docs.wakuconnect.dev/docs/crypto_libraries/</link>
      <pubDate>Thu, 09 Dec 2021 14:00:00 +0100</pubDate>
      
      <guid>https://docs.wakuconnect.dev/docs/crypto_libraries/</guid>
      <description>Cryptographic Libraries A note on the cryptographic libraries used as it is a not a straightforward affair.
Asymmetric encryption Uses ecies-geth which in turns uses SubtleCrypto Web API (browser), secp256k1 (native binding for node) or elliptic (pure JS if none of the other libraries are available).
Symmetric encryption Uses SubtleCrypto Web API (browser) or NodeJS&amp;rsquo; crypto module.</description>
    </item>
    
    <item>
      <title>Implemented Waku Protocols</title>
      <link>https://docs.wakuconnect.dev/docs/waku_protocols/</link>
      <pubDate>Thu, 09 Dec 2021 14:00:00 +0100</pubDate>
      
      <guid>https://docs.wakuconnect.dev/docs/waku_protocols/</guid>
      <description>Waku Protocol Support You can track progress on the project board.
 âœ”: Supported ðŸš§: Implementation in progress â›”: Support is not planned     Spec Implementation Status     6/WAKU1 â›”   7/WAKU-DATA â›”   8/WAKU-MAIL â›”   9/WAKU-RPC â›”   10/WAKU2 ðŸš§   11/WAKU2-RELAY âœ”   12/WAKU2-FILTER    13/WAKU2-STORE âœ” (querying node only)   14/WAKU2-MESSAGE âœ”   15/WAKU2-BRIDGE    16/WAKU2-RPC â›”   17/WAKU2-RLNRELAY    18/WAKU2-SWAP    19/WAKU2-LIGHTPUSH âœ”   20/TOY-ETH-PM âœ” (as example)   21/WAKU2-FTSTORE âœ”   22/TOY-CHAT âœ” (as example)   25/LIBP2P-DNS-DISCOVERY ðŸš§   26/WAKU2-PAYLOAD âœ”    </description>
    </item>
    
  </channel>
</rss>